// Generated by gencpp from file motor_controller/IntList.msg
// DO NOT EDIT!


#ifndef MOTOR_CONTROLLER_MESSAGE_INTLIST_H
#define MOTOR_CONTROLLER_MESSAGE_INTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_controller
{
template <class ContainerAllocator>
struct IntList_
{
  typedef IntList_<ContainerAllocator> Type;

  IntList_()
    : wheel()
    , arm()
    , hopper()
    , bucket()  {
    }
  IntList_(const ContainerAllocator& _alloc)
    : wheel(_alloc)
    , arm(_alloc)
    , hopper(_alloc)
    , bucket(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wheel_type;
  _wheel_type wheel;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _arm_type;
  _arm_type arm;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _hopper_type;
  _hopper_type hopper;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _bucket_type;
  _bucket_type bucket;




  typedef boost::shared_ptr< ::motor_controller::IntList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_controller::IntList_<ContainerAllocator> const> ConstPtr;

}; // struct IntList_

typedef ::motor_controller::IntList_<std::allocator<void> > IntList;

typedef boost::shared_ptr< ::motor_controller::IntList > IntListPtr;
typedef boost::shared_ptr< ::motor_controller::IntList const> IntListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_controller::IntList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_controller::IntList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'motor_controller': ['/home/ben/catkin_ws/src/motor-controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_controller::IntList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_controller::IntList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_controller::IntList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_controller::IntList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_controller::IntList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_controller::IntList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_controller::IntList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e62f442e2d55a264cd175bb6226f3c7";
  }

  static const char* value(const ::motor_controller::IntList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e62f442e2d55a26ULL;
  static const uint64_t static_value2 = 0x4cd175bb6226f3c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_controller::IntList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_controller/IntList";
  }

  static const char* value(const ::motor_controller::IntList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_controller::IntList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] wheel\n\
int32[] arm\n\
int32[] hopper\n\
int32[] bucket\n\
";
  }

  static const char* value(const ::motor_controller::IntList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_controller::IntList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel);
      stream.next(m.arm);
      stream.next(m.hopper);
      stream.next(m.bucket);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_controller::IntList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_controller::IntList_<ContainerAllocator>& v)
  {
    s << indent << "wheel[]" << std::endl;
    for (size_t i = 0; i < v.wheel.size(); ++i)
    {
      s << indent << "  wheel[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wheel[i]);
    }
    s << indent << "arm[]" << std::endl;
    for (size_t i = 0; i < v.arm.size(); ++i)
    {
      s << indent << "  arm[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arm[i]);
    }
    s << indent << "hopper[]" << std::endl;
    for (size_t i = 0; i < v.hopper.size(); ++i)
    {
      s << indent << "  hopper[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.hopper[i]);
    }
    s << indent << "bucket[]" << std::endl;
    for (size_t i = 0; i < v.bucket.size(); ++i)
    {
      s << indent << "  bucket[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.bucket[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_CONTROLLER_MESSAGE_INTLIST_H
